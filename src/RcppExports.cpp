// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetDistance
NumericVector GetDistance(NumericMatrix data, std::string distance, std::string correlation, bool checkNan);
RcppExport SEXP _ldt_GetDistance(SEXP dataSEXP, SEXP distanceSEXP, SEXP correlationSEXP, SEXP checkNanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type correlation(correlationSEXP);
    Rcpp::traits::input_parameter< bool >::type checkNan(checkNanSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDistance(data, distance, correlation, checkNan));
    return rcpp_result_gen;
END_RCPP
}
// ClusterH
List ClusterH(NumericVector distances, std::string linkage);
RcppExport SEXP _ldt_ClusterH(SEXP distancesSEXP, SEXP linkageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkage(linkageSEXP);
    rcpp_result_gen = Rcpp::wrap(ClusterH(distances, linkage));
    return rcpp_result_gen;
END_RCPP
}
// ClusterHGroup
List ClusterHGroup(NumericMatrix data, int nGroups, double threshold, std::string distance, std::string linkage, std::string correlation);
RcppExport SEXP _ldt_ClusterHGroup(SEXP dataSEXP, SEXP nGroupsSEXP, SEXP thresholdSEXP, SEXP distanceSEXP, SEXP linkageSEXP, SEXP correlationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nGroups(nGroupsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkage(linkageSEXP);
    Rcpp::traits::input_parameter< std::string >::type correlation(correlationSEXP);
    rcpp_result_gen = Rcpp::wrap(ClusterHGroup(data, nGroups, threshold, distance, linkage, correlation));
    return rcpp_result_gen;
END_RCPP
}
// SearchDc
SEXP SearchDc(List data, List combinations, List metrics, List modelChecks, List items, List options, SEXP costMatrices, bool searchLogit, bool searchProbit, List newtonOptions, List aucOptions, int numChoices);
RcppExport SEXP _ldt_SearchDc(SEXP dataSEXP, SEXP combinationsSEXP, SEXP metricsSEXP, SEXP modelChecksSEXP, SEXP itemsSEXP, SEXP optionsSEXP, SEXP costMatricesSEXP, SEXP searchLogitSEXP, SEXP searchProbitSEXP, SEXP newtonOptionsSEXP, SEXP aucOptionsSEXP, SEXP numChoicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type combinations(combinationsSEXP);
    Rcpp::traits::input_parameter< List >::type metrics(metricsSEXP);
    Rcpp::traits::input_parameter< List >::type modelChecks(modelChecksSEXP);
    Rcpp::traits::input_parameter< List >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type costMatrices(costMatricesSEXP);
    Rcpp::traits::input_parameter< bool >::type searchLogit(searchLogitSEXP);
    Rcpp::traits::input_parameter< bool >::type searchProbit(searchProbitSEXP);
    Rcpp::traits::input_parameter< List >::type newtonOptions(newtonOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type aucOptions(aucOptionsSEXP);
    Rcpp::traits::input_parameter< int >::type numChoices(numChoicesSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchDc(data, combinations, metrics, modelChecks, items, options, costMatrices, searchLogit, searchProbit, newtonOptions, aucOptions, numChoices));
    return rcpp_result_gen;
END_RCPP
}
// EstimDc
SEXP EstimDc(List data, std::string linkFunc, SEXP pcaOptionsX, SEXP costMatrices, List newtonOptions, List aucOptions, int simFixSize, double simTrainRatio, int simTrainFixSize, int simSeed, double simMaxConditionNumber, int numChoices, bool weightedEval);
RcppExport SEXP _ldt_EstimDc(SEXP dataSEXP, SEXP linkFuncSEXP, SEXP pcaOptionsXSEXP, SEXP costMatricesSEXP, SEXP newtonOptionsSEXP, SEXP aucOptionsSEXP, SEXP simFixSizeSEXP, SEXP simTrainRatioSEXP, SEXP simTrainFixSizeSEXP, SEXP simSeedSEXP, SEXP simMaxConditionNumberSEXP, SEXP numChoicesSEXP, SEXP weightedEvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkFunc(linkFuncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type costMatrices(costMatricesSEXP);
    Rcpp::traits::input_parameter< List >::type newtonOptions(newtonOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type aucOptions(aucOptionsSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< double >::type simTrainRatio(simTrainRatioSEXP);
    Rcpp::traits::input_parameter< int >::type simTrainFixSize(simTrainFixSizeSEXP);
    Rcpp::traits::input_parameter< int >::type simSeed(simSeedSEXP);
    Rcpp::traits::input_parameter< double >::type simMaxConditionNumber(simMaxConditionNumberSEXP);
    Rcpp::traits::input_parameter< int >::type numChoices(numChoicesSEXP);
    Rcpp::traits::input_parameter< bool >::type weightedEval(weightedEvalSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimDc(data, linkFunc, pcaOptionsX, costMatrices, newtonOptions, aucOptions, simFixSize, simTrainRatio, simTrainFixSize, simSeed, simMaxConditionNumber, numChoices, weightedEval));
    return rcpp_result_gen;
END_RCPP
}
// SearchRFunc
SEXP SearchRFunc(List data, List combinations, List metrics, List modelChecks, List items, List options, std::string rFuncName, int length1, bool isInnerExogenous);
RcppExport SEXP _ldt_SearchRFunc(SEXP dataSEXP, SEXP combinationsSEXP, SEXP metricsSEXP, SEXP modelChecksSEXP, SEXP itemsSEXP, SEXP optionsSEXP, SEXP rFuncNameSEXP, SEXP length1SEXP, SEXP isInnerExogenousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type combinations(combinationsSEXP);
    Rcpp::traits::input_parameter< List >::type metrics(metricsSEXP);
    Rcpp::traits::input_parameter< List >::type modelChecks(modelChecksSEXP);
    Rcpp::traits::input_parameter< List >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type rFuncName(rFuncNameSEXP);
    Rcpp::traits::input_parameter< int >::type length1(length1SEXP);
    Rcpp::traits::input_parameter< bool >::type isInnerExogenous(isInnerExogenousSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchRFunc(data, combinations, metrics, modelChecks, items, options, rFuncName, length1, isInnerExogenous));
    return rcpp_result_gen;
END_RCPP
}
// SupportsParallel
bool SupportsParallel();
RcppExport SEXP _ldt_SupportsParallel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(SupportsParallel());
    return rcpp_result_gen;
END_RCPP
}
// GetWeightFromMetric
SEXP GetWeightFromMetric(SEXP value, SEXP metricName, SEXP minValue);
RcppExport SEXP _ldt_GetWeightFromMetric(SEXP valueSEXP, SEXP metricNameSEXP, SEXP minValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type metricName(metricNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type minValue(minValueSEXP);
    rcpp_result_gen = Rcpp::wrap(GetWeightFromMetric(value, metricName, minValue));
    return rcpp_result_gen;
END_RCPP
}
// GetMetricFromWeight
SEXP GetMetricFromWeight(SEXP value, SEXP metricName, SEXP minValue);
RcppExport SEXP _ldt_GetMetricFromWeight(SEXP valueSEXP, SEXP metricNameSEXP, SEXP minValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type metricName(metricNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type minValue(minValueSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMetricFromWeight(value, metricName, minValue));
    return rcpp_result_gen;
END_RCPP
}
// GetRoc
List GetRoc(SEXP y, SEXP scores, SEXP weights, List options);
RcppExport SEXP _ldt_GetRoc(SEXP ySEXP, SEXP scoresSEXP, SEXP weightsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRoc(y, scores, weights, options));
    return rcpp_result_gen;
END_RCPP
}
// GetGldFromMoments
NumericVector GetGldFromMoments(double mean, double variance, double skewness, double excessKurtosis, int type, double s1, double s2, List nelderMeadOptions);
RcppExport SEXP _ldt_GetGldFromMoments(SEXP meanSEXP, SEXP varianceSEXP, SEXP skewnessSEXP, SEXP excessKurtosisSEXP, SEXP typeSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP nelderMeadOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type variance(varianceSEXP);
    Rcpp::traits::input_parameter< double >::type skewness(skewnessSEXP);
    Rcpp::traits::input_parameter< double >::type excessKurtosis(excessKurtosisSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< List >::type nelderMeadOptions(nelderMeadOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetGldFromMoments(mean, variance, skewness, excessKurtosis, type, s1, s2, nelderMeadOptions));
    return rcpp_result_gen;
END_RCPP
}
// GldQuantile
NumericVector GldQuantile(SEXP data, double L1, double L2, double L3, double L4);
RcppExport SEXP _ldt_GldQuantile(SEXP dataSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP L3SEXP, SEXP L4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type L3(L3SEXP);
    Rcpp::traits::input_parameter< double >::type L4(L4SEXP);
    rcpp_result_gen = Rcpp::wrap(GldQuantile(data, L1, L2, L3, L4));
    return rcpp_result_gen;
END_RCPP
}
// GldDensityQuantile
NumericVector GldDensityQuantile(SEXP data, double L1, double L2, double L3, double L4);
RcppExport SEXP _ldt_GldDensityQuantile(SEXP dataSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP L3SEXP, SEXP L4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type L3(L3SEXP);
    Rcpp::traits::input_parameter< double >::type L4(L4SEXP);
    rcpp_result_gen = Rcpp::wrap(GldDensityQuantile(data, L1, L2, L3, L4));
    return rcpp_result_gen;
END_RCPP
}
// CombineStats4
List CombineStats4(List list1, List list2);
RcppExport SEXP _ldt_CombineStats4(SEXP list1SEXP, SEXP list2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list1(list1SEXP);
    Rcpp::traits::input_parameter< List >::type list2(list2SEXP);
    rcpp_result_gen = Rcpp::wrap(CombineStats4(list1, list2));
    return rcpp_result_gen;
END_RCPP
}
// GetPca
List GetPca(NumericMatrix x, bool center, bool scale, SEXP newX);
RcppExport SEXP _ldt_GetPca(SEXP xSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP newXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPca(x, center, scale, newX));
    return rcpp_result_gen;
END_RCPP
}
// SearchSur
SEXP SearchSur(List data, List combinations, List metrics, List modelChecks, List items, List options, int searchSigMaxIter, double searchSigMaxProb);
RcppExport SEXP _ldt_SearchSur(SEXP dataSEXP, SEXP combinationsSEXP, SEXP metricsSEXP, SEXP modelChecksSEXP, SEXP itemsSEXP, SEXP optionsSEXP, SEXP searchSigMaxIterSEXP, SEXP searchSigMaxProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type combinations(combinationsSEXP);
    Rcpp::traits::input_parameter< List >::type metrics(metricsSEXP);
    Rcpp::traits::input_parameter< List >::type modelChecks(modelChecksSEXP);
    Rcpp::traits::input_parameter< List >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< int >::type searchSigMaxIter(searchSigMaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type searchSigMaxProb(searchSigMaxProbSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchSur(data, combinations, metrics, modelChecks, items, options, searchSigMaxIter, searchSigMaxProb));
    return rcpp_result_gen;
END_RCPP
}
// EstimSur
SEXP EstimSur(List data, int searchSigMaxIter, double searchSigMaxProb, SEXP restriction, SEXP pcaOptionsY, SEXP pcaOptionsX, int simFixSize, double simTrainRatio, int simTrainFixSize, int simSeed, double simMaxConditionNumber);
RcppExport SEXP _ldt_EstimSur(SEXP dataSEXP, SEXP searchSigMaxIterSEXP, SEXP searchSigMaxProbSEXP, SEXP restrictionSEXP, SEXP pcaOptionsYSEXP, SEXP pcaOptionsXSEXP, SEXP simFixSizeSEXP, SEXP simTrainRatioSEXP, SEXP simTrainFixSizeSEXP, SEXP simSeedSEXP, SEXP simMaxConditionNumberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type searchSigMaxIter(searchSigMaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type searchSigMaxProb(searchSigMaxProbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type restriction(restrictionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsY(pcaOptionsYSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< double >::type simTrainRatio(simTrainRatioSEXP);
    Rcpp::traits::input_parameter< int >::type simTrainFixSize(simTrainFixSizeSEXP);
    Rcpp::traits::input_parameter< int >::type simSeed(simSeedSEXP);
    Rcpp::traits::input_parameter< double >::type simMaxConditionNumber(simMaxConditionNumberSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimSur(data, searchSigMaxIter, searchSigMaxProb, restriction, pcaOptionsY, pcaOptionsX, simFixSize, simTrainRatio, simTrainFixSize, simSeed, simMaxConditionNumber));
    return rcpp_result_gen;
END_RCPP
}
// SearchVarma
SEXP SearchVarma(List data, List combinations, List metrics, List modelChecks, List items, List options, IntegerVector maxParams, int seasonsCount, int maxHorizon, bool simUsePreviousEstim, double olsStdMultiplier, List lbfgsOptions);
RcppExport SEXP _ldt_SearchVarma(SEXP dataSEXP, SEXP combinationsSEXP, SEXP metricsSEXP, SEXP modelChecksSEXP, SEXP itemsSEXP, SEXP optionsSEXP, SEXP maxParamsSEXP, SEXP seasonsCountSEXP, SEXP maxHorizonSEXP, SEXP simUsePreviousEstimSEXP, SEXP olsStdMultiplierSEXP, SEXP lbfgsOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type combinations(combinationsSEXP);
    Rcpp::traits::input_parameter< List >::type metrics(metricsSEXP);
    Rcpp::traits::input_parameter< List >::type modelChecks(modelChecksSEXP);
    Rcpp::traits::input_parameter< List >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type maxParams(maxParamsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonsCount(seasonsCountSEXP);
    Rcpp::traits::input_parameter< int >::type maxHorizon(maxHorizonSEXP);
    Rcpp::traits::input_parameter< bool >::type simUsePreviousEstim(simUsePreviousEstimSEXP);
    Rcpp::traits::input_parameter< double >::type olsStdMultiplier(olsStdMultiplierSEXP);
    Rcpp::traits::input_parameter< List >::type lbfgsOptions(lbfgsOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchVarma(data, combinations, metrics, modelChecks, items, options, maxParams, seasonsCount, maxHorizon, simUsePreviousEstim, olsStdMultiplier, lbfgsOptions));
    return rcpp_result_gen;
END_RCPP
}
// EstimVarma
SEXP EstimVarma(List data, IntegerVector params, int seasonsCount, List lbfgsOptions, double olsStdMultiplier, SEXP pcaOptionsY, SEXP pcaOptionsX, int maxHorizon, int simFixSize, SEXP simHorizons, bool simUsePreviousEstim, double simMaxConditionNumber);
RcppExport SEXP _ldt_EstimVarma(SEXP dataSEXP, SEXP paramsSEXP, SEXP seasonsCountSEXP, SEXP lbfgsOptionsSEXP, SEXP olsStdMultiplierSEXP, SEXP pcaOptionsYSEXP, SEXP pcaOptionsXSEXP, SEXP maxHorizonSEXP, SEXP simFixSizeSEXP, SEXP simHorizonsSEXP, SEXP simUsePreviousEstimSEXP, SEXP simMaxConditionNumberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonsCount(seasonsCountSEXP);
    Rcpp::traits::input_parameter< List >::type lbfgsOptions(lbfgsOptionsSEXP);
    Rcpp::traits::input_parameter< double >::type olsStdMultiplier(olsStdMultiplierSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsY(pcaOptionsYSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< int >::type maxHorizon(maxHorizonSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type simHorizons(simHorizonsSEXP);
    Rcpp::traits::input_parameter< bool >::type simUsePreviousEstim(simUsePreviousEstimSEXP);
    Rcpp::traits::input_parameter< double >::type simMaxConditionNumber(simMaxConditionNumberSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimVarma(data, params, seasonsCount, lbfgsOptions, olsStdMultiplier, pcaOptionsY, pcaOptionsX, maxHorizon, simFixSize, simHorizons, simUsePreviousEstim, simMaxConditionNumber));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldt_GetDistance", (DL_FUNC) &_ldt_GetDistance, 4},
    {"_ldt_ClusterH", (DL_FUNC) &_ldt_ClusterH, 2},
    {"_ldt_ClusterHGroup", (DL_FUNC) &_ldt_ClusterHGroup, 6},
    {"_ldt_SearchDc", (DL_FUNC) &_ldt_SearchDc, 12},
    {"_ldt_EstimDc", (DL_FUNC) &_ldt_EstimDc, 13},
    {"_ldt_SearchRFunc", (DL_FUNC) &_ldt_SearchRFunc, 9},
    {"_ldt_SupportsParallel", (DL_FUNC) &_ldt_SupportsParallel, 0},
    {"_ldt_GetWeightFromMetric", (DL_FUNC) &_ldt_GetWeightFromMetric, 3},
    {"_ldt_GetMetricFromWeight", (DL_FUNC) &_ldt_GetMetricFromWeight, 3},
    {"_ldt_GetRoc", (DL_FUNC) &_ldt_GetRoc, 4},
    {"_ldt_GetGldFromMoments", (DL_FUNC) &_ldt_GetGldFromMoments, 8},
    {"_ldt_GldQuantile", (DL_FUNC) &_ldt_GldQuantile, 5},
    {"_ldt_GldDensityQuantile", (DL_FUNC) &_ldt_GldDensityQuantile, 5},
    {"_ldt_CombineStats4", (DL_FUNC) &_ldt_CombineStats4, 2},
    {"_ldt_GetPca", (DL_FUNC) &_ldt_GetPca, 4},
    {"_ldt_SearchSur", (DL_FUNC) &_ldt_SearchSur, 8},
    {"_ldt_EstimSur", (DL_FUNC) &_ldt_EstimSur, 11},
    {"_ldt_SearchVarma", (DL_FUNC) &_ldt_SearchVarma, 12},
    {"_ldt_EstimVarma", (DL_FUNC) &_ldt_EstimVarma, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
