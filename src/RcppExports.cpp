// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetDistance
NumericVector GetDistance(NumericMatrix data, std::string distance, std::string correlation, bool checkNan);
RcppExport SEXP _ldt_GetDistance(SEXP dataSEXP, SEXP distanceSEXP, SEXP correlationSEXP, SEXP checkNanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type correlation(correlationSEXP);
    Rcpp::traits::input_parameter< bool >::type checkNan(checkNanSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDistance(data, distance, correlation, checkNan));
    return rcpp_result_gen;
END_RCPP
}
// ClusterH
List ClusterH(NumericVector distances, std::string linkage);
RcppExport SEXP _ldt_ClusterH(SEXP distancesSEXP, SEXP linkageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkage(linkageSEXP);
    rcpp_result_gen = Rcpp::wrap(ClusterH(distances, linkage));
    return rcpp_result_gen;
END_RCPP
}
// ClusterHGroup
List ClusterHGroup(NumericMatrix data, int nGroups, double threshold, std::string distance, std::string linkage, std::string correlation);
RcppExport SEXP _ldt_ClusterHGroup(SEXP dataSEXP, SEXP nGroupsSEXP, SEXP thresholdSEXP, SEXP distanceSEXP, SEXP linkageSEXP, SEXP correlationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nGroups(nGroupsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkage(linkageSEXP);
    Rcpp::traits::input_parameter< std::string >::type correlation(correlationSEXP);
    rcpp_result_gen = Rcpp::wrap(ClusterHGroup(data, nGroups, threshold, distance, linkage, correlation));
    return rcpp_result_gen;
END_RCPP
}
// SearchDc
SEXP SearchDc(SEXP y, SEXP x, SEXP w, SEXP xSizes, SEXP xPartitions, SEXP costMatrices, bool searchLogit, bool searchProbit, List optimOptions, List aucOptions, List metricOptions, List modelCheckItems, List searchItems, List searchOptions);
RcppExport SEXP _ldt_SearchDc(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP xSizesSEXP, SEXP xPartitionsSEXP, SEXP costMatricesSEXP, SEXP searchLogitSEXP, SEXP searchProbitSEXP, SEXP optimOptionsSEXP, SEXP aucOptionsSEXP, SEXP metricOptionsSEXP, SEXP modelCheckItemsSEXP, SEXP searchItemsSEXP, SEXP searchOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xSizes(xSizesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xPartitions(xPartitionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type costMatrices(costMatricesSEXP);
    Rcpp::traits::input_parameter< bool >::type searchLogit(searchLogitSEXP);
    Rcpp::traits::input_parameter< bool >::type searchProbit(searchProbitSEXP);
    Rcpp::traits::input_parameter< List >::type optimOptions(optimOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type aucOptions(aucOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type metricOptions(metricOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type modelCheckItems(modelCheckItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchItems(searchItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchOptions(searchOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchDc(y, x, w, xSizes, xPartitions, costMatrices, searchLogit, searchProbit, optimOptions, aucOptions, metricOptions, modelCheckItems, searchItems, searchOptions));
    return rcpp_result_gen;
END_RCPP
}
// EstimDc
SEXP EstimDc(SEXP y, SEXP x, SEXP w, std::string linkFunc, SEXP newX, SEXP pcaOptionsX, SEXP costMatrices, List aucOptions, int simFixSize, double simTrainRatio, int simTrainFixSize, int simSeed, bool weightedEval, bool printMsg);
RcppExport SEXP _ldt_EstimDc(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP linkFuncSEXP, SEXP newXSEXP, SEXP pcaOptionsXSEXP, SEXP costMatricesSEXP, SEXP aucOptionsSEXP, SEXP simFixSizeSEXP, SEXP simTrainRatioSEXP, SEXP simTrainFixSizeSEXP, SEXP simSeedSEXP, SEXP weightedEvalSEXP, SEXP printMsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkFunc(linkFuncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type costMatrices(costMatricesSEXP);
    Rcpp::traits::input_parameter< List >::type aucOptions(aucOptionsSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< double >::type simTrainRatio(simTrainRatioSEXP);
    Rcpp::traits::input_parameter< int >::type simTrainFixSize(simTrainFixSizeSEXP);
    Rcpp::traits::input_parameter< int >::type simSeed(simSeedSEXP);
    Rcpp::traits::input_parameter< bool >::type weightedEval(weightedEvalSEXP);
    Rcpp::traits::input_parameter< bool >::type printMsg(printMsgSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimDc(y, x, w, linkFunc, newX, pcaOptionsX, costMatrices, aucOptions, simFixSize, simTrainRatio, simTrainFixSize, simSeed, weightedEval, printMsg));
    return rcpp_result_gen;
END_RCPP
}
// SupportsParallel
bool SupportsParallel();
RcppExport SEXP _ldt_SupportsParallel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(SupportsParallel());
    return rcpp_result_gen;
END_RCPP
}
// GetWeightFromMetric
SEXP GetWeightFromMetric(SEXP value, SEXP metricName);
RcppExport SEXP _ldt_GetWeightFromMetric(SEXP valueSEXP, SEXP metricNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type metricName(metricNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetWeightFromMetric(value, metricName));
    return rcpp_result_gen;
END_RCPP
}
// GetMetricFromWeight
SEXP GetMetricFromWeight(SEXP value, SEXP metricName);
RcppExport SEXP _ldt_GetMetricFromWeight(SEXP valueSEXP, SEXP metricNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type metricName(metricNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMetricFromWeight(value, metricName));
    return rcpp_result_gen;
END_RCPP
}
// GetRoc
List GetRoc(SEXP y, SEXP scores, SEXP weights, List options, bool printMsg);
RcppExport SEXP _ldt_GetRoc(SEXP ySEXP, SEXP scoresSEXP, SEXP weightsSEXP, SEXP optionsSEXP, SEXP printMsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type printMsg(printMsgSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRoc(y, scores, weights, options, printMsg));
    return rcpp_result_gen;
END_RCPP
}
// GetGldFromMoments
NumericVector GetGldFromMoments(double mean, double variance, double skewness, double excessKurtosis, int type, double s1, double s2, List nelderMeadOptions, bool printMsg);
RcppExport SEXP _ldt_GetGldFromMoments(SEXP meanSEXP, SEXP varianceSEXP, SEXP skewnessSEXP, SEXP excessKurtosisSEXP, SEXP typeSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP nelderMeadOptionsSEXP, SEXP printMsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type variance(varianceSEXP);
    Rcpp::traits::input_parameter< double >::type skewness(skewnessSEXP);
    Rcpp::traits::input_parameter< double >::type excessKurtosis(excessKurtosisSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< List >::type nelderMeadOptions(nelderMeadOptionsSEXP);
    Rcpp::traits::input_parameter< bool >::type printMsg(printMsgSEXP);
    rcpp_result_gen = Rcpp::wrap(GetGldFromMoments(mean, variance, skewness, excessKurtosis, type, s1, s2, nelderMeadOptions, printMsg));
    return rcpp_result_gen;
END_RCPP
}
// GldQuantile
NumericVector GldQuantile(SEXP data, double L1, double L2, double L3, double L4);
RcppExport SEXP _ldt_GldQuantile(SEXP dataSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP L3SEXP, SEXP L4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type L3(L3SEXP);
    Rcpp::traits::input_parameter< double >::type L4(L4SEXP);
    rcpp_result_gen = Rcpp::wrap(GldQuantile(data, L1, L2, L3, L4));
    return rcpp_result_gen;
END_RCPP
}
// GldDensityQuantile
NumericVector GldDensityQuantile(SEXP data, double L1, double L2, double L3, double L4);
RcppExport SEXP _ldt_GldDensityQuantile(SEXP dataSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP L3SEXP, SEXP L4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type L3(L3SEXP);
    Rcpp::traits::input_parameter< double >::type L4(L4SEXP);
    rcpp_result_gen = Rcpp::wrap(GldDensityQuantile(data, L1, L2, L3, L4));
    return rcpp_result_gen;
END_RCPP
}
// CombineStats4
List CombineStats4(List list1, List list2);
RcppExport SEXP _ldt_CombineStats4(SEXP list1SEXP, SEXP list2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list1(list1SEXP);
    Rcpp::traits::input_parameter< List >::type list2(list2SEXP);
    rcpp_result_gen = Rcpp::wrap(CombineStats4(list1, list2));
    return rcpp_result_gen;
END_RCPP
}
// GetPca
List GetPca(NumericMatrix x, bool center, bool scale, SEXP newX);
RcppExport SEXP _ldt_GetPca(SEXP xSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP newXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    rcpp_result_gen = Rcpp::wrap(GetPca(x, center, scale, newX));
    return rcpp_result_gen;
END_RCPP
}
// SearchSur
SEXP SearchSur(SEXP y, SEXP x, int numTargets, SEXP xSizes, SEXP xPartitions, int numFixXPartitions, SEXP yGroups, int searchSigMaxIter, double searchSigMaxProb, List metricOptions, List modelCheckItems, List searchItems, List searchOptions);
RcppExport SEXP _ldt_SearchSur(SEXP ySEXP, SEXP xSEXP, SEXP numTargetsSEXP, SEXP xSizesSEXP, SEXP xPartitionsSEXP, SEXP numFixXPartitionsSEXP, SEXP yGroupsSEXP, SEXP searchSigMaxIterSEXP, SEXP searchSigMaxProbSEXP, SEXP metricOptionsSEXP, SEXP modelCheckItemsSEXP, SEXP searchItemsSEXP, SEXP searchOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type numTargets(numTargetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xSizes(xSizesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xPartitions(xPartitionsSEXP);
    Rcpp::traits::input_parameter< int >::type numFixXPartitions(numFixXPartitionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yGroups(yGroupsSEXP);
    Rcpp::traits::input_parameter< int >::type searchSigMaxIter(searchSigMaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type searchSigMaxProb(searchSigMaxProbSEXP);
    Rcpp::traits::input_parameter< List >::type metricOptions(metricOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type modelCheckItems(modelCheckItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchItems(searchItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchOptions(searchOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchSur(y, x, numTargets, xSizes, xPartitions, numFixXPartitions, yGroups, searchSigMaxIter, searchSigMaxProb, metricOptions, modelCheckItems, searchItems, searchOptions));
    return rcpp_result_gen;
END_RCPP
}
// EstimSur
SEXP EstimSur(SEXP y, SEXP x, bool addIntercept, int searchSigMaxIter, double searchSigMaxProb, SEXP restriction, SEXP newX, SEXP pcaOptionsY, SEXP pcaOptionsX, int simFixSize, double simTrainRatio, int simTrainFixSize, int simSeed, double simMaxConditionNumber, bool printMsg);
RcppExport SEXP _ldt_EstimSur(SEXP ySEXP, SEXP xSEXP, SEXP addInterceptSEXP, SEXP searchSigMaxIterSEXP, SEXP searchSigMaxProbSEXP, SEXP restrictionSEXP, SEXP newXSEXP, SEXP pcaOptionsYSEXP, SEXP pcaOptionsXSEXP, SEXP simFixSizeSEXP, SEXP simTrainRatioSEXP, SEXP simTrainFixSizeSEXP, SEXP simSeedSEXP, SEXP simMaxConditionNumberSEXP, SEXP printMsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type addIntercept(addInterceptSEXP);
    Rcpp::traits::input_parameter< int >::type searchSigMaxIter(searchSigMaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type searchSigMaxProb(searchSigMaxProbSEXP);
    Rcpp::traits::input_parameter< SEXP >::type restriction(restrictionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsY(pcaOptionsYSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< double >::type simTrainRatio(simTrainRatioSEXP);
    Rcpp::traits::input_parameter< int >::type simTrainFixSize(simTrainFixSizeSEXP);
    Rcpp::traits::input_parameter< int >::type simSeed(simSeedSEXP);
    Rcpp::traits::input_parameter< double >::type simMaxConditionNumber(simMaxConditionNumberSEXP);
    Rcpp::traits::input_parameter< bool >::type printMsg(printMsgSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimSur(y, x, addIntercept, searchSigMaxIter, searchSigMaxProb, restriction, newX, pcaOptionsY, pcaOptionsX, simFixSize, simTrainRatio, simTrainFixSize, simSeed, simMaxConditionNumber, printMsg));
    return rcpp_result_gen;
END_RCPP
}
// SearchVarma
SEXP SearchVarma(SEXP y, SEXP x, int numTargets, SEXP ySizes, SEXP yPartitions, SEXP xGroups, SEXP maxParams, int seasonsCount, int maxHorizon, SEXP newX, bool simUsePreviousEstim, double olsStdMultiplier, List lbfgsOptions, List metricOptions, List modelCheckItems, List searchItems, List searchOptions);
RcppExport SEXP _ldt_SearchVarma(SEXP ySEXP, SEXP xSEXP, SEXP numTargetsSEXP, SEXP ySizesSEXP, SEXP yPartitionsSEXP, SEXP xGroupsSEXP, SEXP maxParamsSEXP, SEXP seasonsCountSEXP, SEXP maxHorizonSEXP, SEXP newXSEXP, SEXP simUsePreviousEstimSEXP, SEXP olsStdMultiplierSEXP, SEXP lbfgsOptionsSEXP, SEXP metricOptionsSEXP, SEXP modelCheckItemsSEXP, SEXP searchItemsSEXP, SEXP searchOptionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type numTargets(numTargetsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ySizes(ySizesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yPartitions(yPartitionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xGroups(xGroupsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxParams(maxParamsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonsCount(seasonsCountSEXP);
    Rcpp::traits::input_parameter< int >::type maxHorizon(maxHorizonSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< bool >::type simUsePreviousEstim(simUsePreviousEstimSEXP);
    Rcpp::traits::input_parameter< double >::type olsStdMultiplier(olsStdMultiplierSEXP);
    Rcpp::traits::input_parameter< List >::type lbfgsOptions(lbfgsOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type metricOptions(metricOptionsSEXP);
    Rcpp::traits::input_parameter< List >::type modelCheckItems(modelCheckItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchItems(searchItemsSEXP);
    Rcpp::traits::input_parameter< List >::type searchOptions(searchOptionsSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchVarma(y, x, numTargets, ySizes, yPartitions, xGroups, maxParams, seasonsCount, maxHorizon, newX, simUsePreviousEstim, olsStdMultiplier, lbfgsOptions, metricOptions, modelCheckItems, searchItems, searchOptions));
    return rcpp_result_gen;
END_RCPP
}
// EstimVarma
SEXP EstimVarma(SEXP y, SEXP x, SEXP params, int seasonsCount, bool addIntercept, List lbfgsOptions, double olsStdMultiplier, SEXP pcaOptionsY, SEXP pcaOptionsX, int maxHorizon, SEXP newX, int simFixSize, SEXP simHorizons, bool simUsePreviousEstim, double simMaxConditionNumber, bool printMsg);
RcppExport SEXP _ldt_EstimVarma(SEXP ySEXP, SEXP xSEXP, SEXP paramsSEXP, SEXP seasonsCountSEXP, SEXP addInterceptSEXP, SEXP lbfgsOptionsSEXP, SEXP olsStdMultiplierSEXP, SEXP pcaOptionsYSEXP, SEXP pcaOptionsXSEXP, SEXP maxHorizonSEXP, SEXP newXSEXP, SEXP simFixSizeSEXP, SEXP simHorizonsSEXP, SEXP simUsePreviousEstimSEXP, SEXP simMaxConditionNumberSEXP, SEXP printMsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonsCount(seasonsCountSEXP);
    Rcpp::traits::input_parameter< bool >::type addIntercept(addInterceptSEXP);
    Rcpp::traits::input_parameter< List >::type lbfgsOptions(lbfgsOptionsSEXP);
    Rcpp::traits::input_parameter< double >::type olsStdMultiplier(olsStdMultiplierSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsY(pcaOptionsYSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pcaOptionsX(pcaOptionsXSEXP);
    Rcpp::traits::input_parameter< int >::type maxHorizon(maxHorizonSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< int >::type simFixSize(simFixSizeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type simHorizons(simHorizonsSEXP);
    Rcpp::traits::input_parameter< bool >::type simUsePreviousEstim(simUsePreviousEstimSEXP);
    Rcpp::traits::input_parameter< double >::type simMaxConditionNumber(simMaxConditionNumberSEXP);
    Rcpp::traits::input_parameter< bool >::type printMsg(printMsgSEXP);
    rcpp_result_gen = Rcpp::wrap(EstimVarma(y, x, params, seasonsCount, addIntercept, lbfgsOptions, olsStdMultiplier, pcaOptionsY, pcaOptionsX, maxHorizon, newX, simFixSize, simHorizons, simUsePreviousEstim, simMaxConditionNumber, printMsg));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldt_GetDistance", (DL_FUNC) &_ldt_GetDistance, 4},
    {"_ldt_ClusterH", (DL_FUNC) &_ldt_ClusterH, 2},
    {"_ldt_ClusterHGroup", (DL_FUNC) &_ldt_ClusterHGroup, 6},
    {"_ldt_SearchDc", (DL_FUNC) &_ldt_SearchDc, 14},
    {"_ldt_EstimDc", (DL_FUNC) &_ldt_EstimDc, 14},
    {"_ldt_SupportsParallel", (DL_FUNC) &_ldt_SupportsParallel, 0},
    {"_ldt_GetWeightFromMetric", (DL_FUNC) &_ldt_GetWeightFromMetric, 2},
    {"_ldt_GetMetricFromWeight", (DL_FUNC) &_ldt_GetMetricFromWeight, 2},
    {"_ldt_GetRoc", (DL_FUNC) &_ldt_GetRoc, 5},
    {"_ldt_GetGldFromMoments", (DL_FUNC) &_ldt_GetGldFromMoments, 9},
    {"_ldt_GldQuantile", (DL_FUNC) &_ldt_GldQuantile, 5},
    {"_ldt_GldDensityQuantile", (DL_FUNC) &_ldt_GldDensityQuantile, 5},
    {"_ldt_CombineStats4", (DL_FUNC) &_ldt_CombineStats4, 2},
    {"_ldt_GetPca", (DL_FUNC) &_ldt_GetPca, 4},
    {"_ldt_SearchSur", (DL_FUNC) &_ldt_SearchSur, 13},
    {"_ldt_EstimSur", (DL_FUNC) &_ldt_EstimSur, 15},
    {"_ldt_SearchVarma", (DL_FUNC) &_ldt_SearchVarma, 17},
    {"_ldt_EstimVarma", (DL_FUNC) &_ldt_EstimVarma, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
